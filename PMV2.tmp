# ============================================
# EMOTIBOT - PMV2 (versión corregida con emoción neutral)
# Chatbot con Firebase y Recomendaciones Personalizadas
# Universidad Continental - 2025
# ============================================

!pip install firebase_admin scikit-learn

import random
import time
from datetime import datetime
import firebase_admin
from firebase_admin import credentials, firestore
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier

# --------------------------------------------
# 1️⃣ Conexión con Firebase
# --------------------------------------------
if not firebase_admin._apps:
    cred = credentials.Certificate("/content/chatbot-78eec-firebase-adminsdk-fbsvc-5a688937c9.json")
    firebase_admin.initialize_app(cred)

db = firestore.client()
print("✅ Conectado correctamente a Firebase")

# --------------------------------------------
# 2️⃣ Base de entrenamiento (incluye emoción 'neutral')
# --------------------------------------------
frases = [
    # Tristeza / depresión
    "Estoy deprimido", "Me siento mal", "Estoy desanimado", "No tengo ganas de nada",
    "Siento que nada tiene sentido", "Estoy sin energía", "Estoy triste y sin motivación",
    # Ansiedad
    "Estoy ansioso", "Me siento nervioso", "Tengo miedo", "Estoy preocupado",
    "No puedo dormir por ansiedad", "Estoy tenso", "Siento mucha presión", "No puedo concentrarme",
    # Felicidad
    "Estoy feliz", "Todo va bien", "Me siento genial", "Estoy contento", "Hoy fue un gran día",
    # Enojo
    "Estoy enojado", "Me siento molesto", "Estoy frustrado", "No quiero hablar con nadie",
    # Ayuda
    "Necesito ayuda", "No sé qué hacer", "Por favor apóyame", "Me siento solo",
    # Neutral / saludo
    "hola", "buenos días", "buenas tardes", "cómo estás", "gracias", "qué tal", "hola amigo", "buenas noches", "todo bien", "me cuentas algo"
]

emociones = [
    "triste", "triste", "triste", "triste", "triste", "triste", "triste",
    "ansioso", "ansioso", "ansioso", "ansioso", "ansioso", "ansioso", "ansioso", "ansioso",
    "feliz", "feliz", "feliz", "feliz", "feliz",
    "enojado", "enojado", "enojado", "enojado",
    "ayuda", "ayuda", "ayuda", "ayuda",
    "neutral", "neutral", "neutral", "neutral", "neutral", "neutral", "neutral", "neutral", "neutral", "neutral"
]

# Entrenar modelo
vectorizer = TfidfVectorizer(ngram_range=(1,2))
X = vectorizer.fit_transform(frases)
clf = RandomForestClassifier(n_estimators=500, random_state=42)
clf.fit(X, emociones)

print("🤖 Modelo entrenado correctamente con emoción 'neutral' incluida.")

# --------------------------------------------
# 3️⃣ Recomendaciones personalizadas
# --------------------------------------------
recomendaciones = {
    "triste": [
        "Lamento que te sientas así 😔. Puedes tomar un descanso o hablar con alguien de confianza.",
        "Es normal sentirse triste a veces 💙. Estoy aquí para escucharte."
    ],
    "ansioso": [
        "Trata de respirar profundo unos segundos 🧘.",
        "Puedes relajarte con música tranquila o una caminata corta 🌿."
    ],
    "feliz": [
        "¡Qué bueno! 😄 Me alegra saberlo.",
        "Sigue disfrutando tu día ✨."
    ],
    "enojado": [
        "Entiendo, la ira puede ser intensa 🔥. Tomar un respiro ayuda.",
        "Hablar o escribir sobre lo que te molesta puede aliviarte 💭."
    ],
    "ayuda": [
        "Estoy aquí para escucharte 🤝. ¿Quieres que te conecte con un especialista?",
        "No estás solo, podemos buscar ayuda juntos 💬."
    ],
    "neutral": [
        "¡Hola! 😊 ¿Cómo te encuentras hoy?",
        "Qué gusto saludarte 👋 ¿Cómo ha estado tu día?",
        "Gracias por conversar conmigo 🙌"
    ],
    "desconocido": [
        "Gracias por compartir. Cuéntame un poco más para entenderte mejor 🤔."
    ]
}

# --------------------------------------------
# 4️⃣ Análisis de emoción y riesgo
# --------------------------------------------
def analizar_texto(texto):
    X_new = vectorizer.transform([texto])
    emocion = clf.predict(X_new)[0]

    if emocion == "neutral":
        riesgo = random.randint(0, 10)
    elif emocion == "feliz":
        riesgo = random.randint(0, 25)
    elif emocion == "enojado":
        riesgo = random.randint(40, 60)
    elif emocion == "triste":
        riesgo = random.randint(60, 80)
    elif emocion == "ansioso":
        riesgo = random.randint(70, 90)
    elif emocion == "ayuda":
        riesgo = random.randint(80, 100)
    else:
        riesgo = random.randint(30, 70)
    return emocion, riesgo

# --------------------------------------------
# 5️⃣ Guardar en Firebase
# --------------------------------------------
def guardar_en_firebase(usuario, mensaje, emocion, riesgo):
    data = {
        "usuario": usuario,
        "mensaje": mensaje,
        "emocion": emocion,
        "riesgo_emocional": riesgo,
        "fecha": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    db.collection("conversaciones").add(data)
    time.sleep(1)
    print("💾 Conversación guardada en Firebase.")

# --------------------------------------------
# 6️⃣ Chat principal
# --------------------------------------------
def chatbot():
    print("💬 EMOTIBOT PMV2 - Versión Corregida (con 'neutral')")
    usuario = input("👤 Ingresa tu nombre: ").strip()

    while True:
        texto = input("\nTú: ").strip()
        if texto.lower() in ["salir", "chao", "adios", "finalizar"]:
            print("👋 ¡Cuídate mucho, hasta luego!")
            break

        emocion, riesgo = analizar_texto(texto)
        respuesta = random.choice(recomendaciones.get(emocion, recomendaciones["desconocido"]))

        print(f"🤖 EMOTIBOT: {respuesta} (Riesgo emocional estimado: {riesgo}%)")

        guardar_en_firebase(usuario, texto, emocion, riesgo)

        if riesgo >= 80 and emocion != "neutral":
            print("🚨 Nivel alto detectado, te recomiendo contactar a un psicólogo del directorio 📞")

# --------------------------------------------
# 7️⃣ Ejecutar chatbot
# --------------------------------------------
chatbot()
